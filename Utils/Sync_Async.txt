//Example for SYNCHRONOUS methods

import 'dart:io';

void main() {
  performTasks();
}

void performTasks()  {
   task1();
   task2();
   task3();
}

void task1() {
  String result = 'task 1 data';
  print('Task 1 complete');
}

void task2()  {
 Duration threeSeconds = Duration(seconds: 3);
  sleep(threeSeconds);
  String result = 'task 2 data';
  print('Task 2 complete');
}

void task3() {
 String result = 'task 3 data';
  print('Task 3 complete');
}
//OUTPUT: Task 1 complete
		  Task 2 complete   ,but here, task2 and task3 are executed after waiting 3 seconds, so the task3 has to wait too because of the delay from task2
		  Task 3 complete

-----------------------------------------------------------------------------------------------------------------------------------------------------------

//Example for ASYNCHRONOUS methods

import 'dart:io';

void main() {
  performTasks();
}

void performTasks() {
  task1();
  task2();
  task3();
}

void task1() {
  String result = 'task 1 data';
  print('Task 1 complete');
}

void task2() {
  Duration threeSeconds = Duration(seconds: 3);
  Future.delayed(threeSeconds, () { 	,here we have an asynchronous method which will wait for 3 seconds, and then, it will continue with the instructions given as the second parameter
    String result = 'task 2 data';
    print('Task 2 complete');
  });
}

void task3() {
  String result = 'task 3 data';
  print('Task 3 complete');
}
//OUTPUT: Task 1 complete
		  Task 3 complete	,so task1 will be executed, task2 will have to wait for 3 seconds, so it will run task3, and after the waiting time from task2, it will be finally executed too
		  Task 2 complete
		  
--------------------------------------------------------------------------------------------------------------------------------------------------------------

//Example of using async functions, with await and Future class:

import 'dart:io';

void main() {
  performTasks();
}

void performTasks() async {
  task1();
  String task2Result = await task2();
  task3(task2Result);
}

void task1() {
  String result = 'task 1 data';
  print('Task 1 complete');
}

Future<String> task2() async {
  Duration threeSeconds = Duration(seconds: 3);
  String result;
  await Future.delayed(threeSeconds, () {
    result = 'task 2 data';
    print('Task 2 complete');
  });
  return result;
}

void task3(String task2Data) {
  String result = 'task 3 data';
  print('Task 3 complete with $task2Data');
}
//OUTPUT: Task 1 complete
		  Task 2 complete
		  Task 3 complete with task 2 data 
